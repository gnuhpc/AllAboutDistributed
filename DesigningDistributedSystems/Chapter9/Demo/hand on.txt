wget https://storage.googleapis.com/kubernetes-helm/helm-v2.14.0-linux-amd64.tar.gz

安装helm
git clone git@github.com:helm/helm.git
cd helm
make bootstrap build 

初始化helm
helm reset --force
cat rbac-config.yaml                                                                                                                                         
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tiller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: tiller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: tiller
    namespace: kube-system

kubectl create -f rbac-config.yaml

helm init --service-account tiller --skip-refresh


helm install stable/etcd-operator --name my-release
helm list

初始化etcd集群
git clone git@github.com:coreos/etcd-operator.git
kubectl create -f ~/go/src/github.com/coreos/etcd-operator/example/example-etcd-cluster.yaml
kubectl get pods
example-etcd-cluster-9bj4mgj927                                  1/1     Running   0          2m39s
example-etcd-cluster-gtdmc6gbhl                                  1/1     Running   0          4m39s
example-etcd-cluster-k82gkrs88w                                  1/1     Running   0          2m55s

通过etcd演示对于集群进行值的赋值和获取
export ETCD_ENDPOINTS="//"$(kubectl get service example-etcd-cluster-client -o jsonpath={.spec.clusterIP})":2379"
kubectl exec example-etcd-cluster-9bj4mgj927 -- sh -c "ETCD_API=3 etcdctl --endpoints=${ETCD_ENDPOINTS} member list"
kubectl exec example-etcd-cluster-9bj4mgj927 -- sh -c "ETCD_API=3 etcdctl --endpoints=${ETCD_ENDPOINTS} set foo bar"
kubectl exec example-etcd-cluster-9bj4mgj927 -- sh -c "ETCD_API=3 etcdctl --endpoints=${ETCD_ENDPOINTS} get foo"

通过etcd演示对于一个资源的控制只有在与当前值进行比较成功后才可以转到下一个状态，对于临界资源的封锁只有它的所有者才可以解开
kubectl exec example-etcd-cluster-9bj4mgj927 -- sh -c "ETCD_API=3 etcdctl --endpoints=${ETCD_ENDPOINTS} set my-lock unlocked"
kubectl exec example-etcd-cluster-9bj4mgj927 -- sh -c "ETCD_API=3 etcdctl --endpoints=${ETCD_ENDPOINTS} set --swap-with-value unlocked my-lock alice"
kubectl exec example-etcd-cluster-9bj4mgj927 -- sh -c "ETCD_API=3 etcdctl --endpoints=${ETCD_ENDPOINTS} set --swap-with-value unlocked my-lock bob"
kubectl exec example-etcd-cluster-9bj4mgj927 -- sh -c "ETCD_API=3 etcdctl --endpoints=${ETCD_ENDPOINTS} set --swap-with-value alice my-lock unlocked"

kubectl exec example-etcd-cluster-9bj4mgj927 -- sh -c "ETCD_API=3 etcdctl --endpoints=${ETCD_ENDPOINTS} watch my-lock"
kubectl exec example-etcd-cluster-9bj4mgj927 -- sh -c "ETCD_API=3 etcdctl --endpoints=${ETCD_ENDPOINTS} rm my-lock"

通过etcd演示租借锁的使用，在租借期满以后租借锁会自动销毁，如果需要续租则它的所有者需要再次租借以维持租期
kubectl exec example-etcd-cluster-9bj4mgj927 -- sh -c "ETCD_API=3 etcdctl --endpoints=${ETCD_ENDPOINTS} mk --ttl=10 my-lock alice"
kubectl exec example-etcd-cluster-9bj4mgj927 -- sh -c "ETCD_API=3 etcdctl --endpoints=${ETCD_ENDPOINTS} set --ttl=10 --swap-with-value alice my-lock alice"

kubectl exec example-etcd-cluster-9bj4mgj927 -- sh -c "ETCD_API=3 etcdctl --endpoints=${ETCD_ENDPOINTS} rm my-lock"